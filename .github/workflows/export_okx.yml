name: Export OKX ETH 15m CSV

on:
  workflow_dispatch: {}
  schedule:
    - cron: "12 2 * * *"  # 每天 02:12 UTC 跑一次（可改）

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
            node-version: 20

      - name: Write exporter
        run: |
          cat > export_okx_1y.mjs <<'EOF'
          import fs from 'node:fs/promises';

          // ======= 必改：把下面替换成你的 Worker 域名（不要多/少斜杠）=======
          const PROXY_BASE = 'https://eth-proxy.1053363050.workers.dev';
          // ============================================================

          const INST_ID = 'ETH-USDT';
          const BAR = '15m';
          const OUT = 'okx_eth_15m.csv';

          // OKX 按时间倒序返回。用 before 游标向前翻页，直到够一年或没数据。
          const now = Date.now();
          const ONE_YEAR_MS = 365 * 24 * 60 * 60 * 1000;
          const since = now - ONE_YEAR_MS;

          const header = 'ts,iso,open,high,low,close,vol\n';
          const rows = [];
          let before = null;
          let page = 0;

          async function fetchPage() {
            const p = new URLSearchParams({
              instId: INST_ID,
              bar: BAR,
              limit: '100',
            });
            if (before) p.set('before', String(before));

            const url = `${PROXY_BASE}/proxy/api/v5/market/candles?${p.toString()}`;
            const resp = await fetch(url, { headers: { 'accept': 'application/json' } });
            if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
            const js = await resp.json();
            if (js.code !== '0') throw new Error(`OKX code=${js.code} msg=${js.msg}`);

            const data = js.data ?? [];
            return data; // 数组里每项：[ts, o, h, l, c, vol, volCcy, volCcyQuote, confirm]
          }

          function fmt(n) {
            // 保留原始字符串形式，避免精度损失
            return String(n);
          }

          while (true) {
            page++;
            const data = await fetchPage();
            if (!Array.isArray(data) || data.length === 0) break;

            for (const k of data) {
              const ts = Number(k[0]);
              if (Number.isNaN(ts)) continue;
              if (ts < since) continue; // 早于一年范围则跳过
              const iso = new Date(ts).toISOString().replace('.000Z', 'Z');
              const [ , open, high, low, close, vol ] = k;
              rows.push([ts, iso, fmt(open), fmt(high), fmt(low), fmt(close), fmt(vol)].join(','));
            }

            // 下一页游标：用本页最后一根K线的时间戳
            before = Number(data[data.length - 1][0]);
            // 安全阈值，防止死循环
            if (page > 2000) break;
            // 如果最早一条已经早于一年，继续翻一页以确保覆盖边界；不足一页也再翻一次
            if (before < since && data.length < 100) break;
          }

          if (rows.length < 10) {
            console.error('rows < 10，疑似取数失败，取消写文件。');
            process.exit(1);
          }

          // OKX 返回是倒序，这里按时间升序写出
          rows.sort((a, b) => Number(a.split(',')[0]) - Number(b.split(',')[0]));

          const csv = header + rows.join('\n') + '\n';
          await fs.writeFile(OUT, csv, 'utf8');
          console.log(`Wrote ${OUT} with ${rows.length} rows`);
          EOF

      - name: Run exporter
        run: node export_okx_1y.mjs

      - name: Commit CSV if changed
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add okx_eth_15m.csv export_okx_1y.mjs
          git diff --cached --quiet || git commit -m "update: OKX ETH 15m CSV (1y)"
          git push
